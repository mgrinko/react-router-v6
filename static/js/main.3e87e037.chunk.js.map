{"version":3,"sources":["api/api.js","api/todos.js","components/TodosPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","getTodos","url","fetch","then","res","json","request","TodosPage","useState","todos","setTodos","useSearchParams","searchParams","setSearchParams","console","log","Object","fromEntries","entries","useEffect","query","get","sortBy","visibleTodos","filter","todo","title","includes","sort","a","b","localeCompare","id","className","type","value","onChange","event","target","onClick","map","to","pathname","search","toLocaleString","completed","userId","TodoPage","params","useParams","todoId","App","isActive","classNames","path","element","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e87e037.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(res => res.json());\n};\n","import { request } from './api';\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n","import { useEffect, useState } from 'react';\nimport { Link, Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport { getTodos } from '../api/todos';\n\nexport const TodosPage = () => {\n  const [todos, setTodos] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  console.log(\n    Object.fromEntries(searchParams.entries())\n  );\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos);\n  }, []);\n\n  const query = searchParams.get('query') || '';\n  const sortBy = searchParams.get('sortBy') || '';\n\n  const visibleTodos = todos.filter(todo => todo.title.includes(query));\n\n  if (sortBy) {\n    visibleTodos.sort((a, b) => {\n      switch (sortBy) {\n        case 'title':\n          return a.title.localeCompare(b.title);\n        case 'id':\n          return a.id - b.id;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return (\n    <div className=\"TodosPage\">\n      <h1>Todos</h1>\n\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => {\n          setSearchParams({\n            ...Object.fromEntries(searchParams.entries()),\n            query: event.target.value,\n          });\n        }}\n      />\n\n      <Outlet />\n\n      <table>\n        <thead>\n          <tr>\n            <th onClick={() => setSearchParams({\n              ...Object.fromEntries(searchParams.entries()),\n              sortBy: 'id'\n            })}>\n              id\n            </th>\n            <th onClick={() => setSearchParams({\n              ...Object.fromEntries(searchParams.entries()),\n              sortBy: 'title'\n            })}>\n              title\n            </th>\n            <th>completed</th>\n            <th>userId</th>\n          </tr>\n        </thead>\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr key={todo.id}>\n              <td>{todo.id}</td>\n              <td>\n                <Link to={{\n                  pathname: `${todo.id}`,\n                  search: searchParams.toLocaleString(),\n                }}>\n                  {todo.title}\n                </Link>\n              </td>\n              <td>{todo.completed ? 'DONE' : ''}</td>\n              <td>{todo.userId}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport const TodoPage = () => {\n  const params = useParams();\n\n  return (\n    <p>Todo {params.todoId} is selected</p>\n  );\n}\n","import './App.css';\nimport classNames from 'classnames';\nimport { Routes, Route, NavLink, Outlet } from 'react-router-dom';\nimport { TodosPage, TodoPage } from './components/TodosPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"nav\">\n        <NavLink\n          to=\"\"\n          className={({ isActive }) => classNames({\n            'nav__link': true,\n            'nav__link--active': isActive,\n          })}\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          to=\"goods\"\n          className={({ isActive }) => classNames({\n            'nav__link': true,\n            'nav__link--active': isActive,\n          })}\n        >\n          Goods\n        </NavLink>\n\n        <NavLink\n          to=\"todos\"\n          className={({ isActive }) => classNames({\n            'nav__link': true,\n            'nav__link--active': isActive,\n          })}\n        >\n          Todos\n        </NavLink>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<h1>Home page</h1>} />\n        <Route path=\"about\" element={<h1>About page</h1>} />\n\n        <Route path=\"todos\" element={<TodosPage />}>\n          <Route path=\":todoId\" element={<TodoPage />} />\n        </Route>\n\n        <Route path=\"goods\" element={<Outlet />}>\n          <Route index element={<TodosPage />} />\n          <Route path=\":todoId\" element={<TodoPage />} />\n        </Route>\n\n        <Route path=\"*\" element={<h2>Page not found</h2>}/>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}